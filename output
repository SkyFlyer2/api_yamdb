============================= test session starts =============================
platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- c:\users\vladislav.kovalev\downloads\dev\api_yamdb\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: C:\Users\vladislav.kovalev\Downloads\Dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup FAILED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data PASSED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user PASSED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator PASSED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre FAILED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user PASSED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator PASSED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
_____________ Test00UserRegistration.test_00_invalid_data_signup ______________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x04F870B8>
client = <django.test.client.Client object at 0x05106B20>

    @pytest.mark.django_db(transaction=True)
    def test_00_invalid_data_signup(self, client):
        invalid_email = 'invalid_email'
        invalid_username = 'invalid_username@yamdb.fake'
    
        invalid_data = {
            'email': invalid_email,
            'username': invalid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=invalid_data)
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
        code = 400
        assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с невалидными данными '
            f'не создаетс€ пользователь и возвращаетс€ статус {code}'
        )
    
        response_json = response.json()
        invalid_fields = ['email']
        for field in invalid_fields:
>           assert (field in response_json.keys()
                    and isinstance(response_json[field], list)), (
                f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с невалидными параметрами, '
                f'в ответе есть сообщение о том, какие пол€ заполенены неправильно'
            )
E           AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с невалидными параметрами, в ответе есть сообщение о том, какие пол€ заполенены неправильно
E           assert ('email' in dict_keys(['username']))
E            +  where dict_keys(['username']) = <built-in method keys of dict object at 0x0510F550>()
E            +    where <built-in method keys of dict object at 0x0510F550> = {'username': ['”бедитесь, что это значение содержит не более 25 символов.']}.keys

tests\test_00_user_registration.py:59: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/auth/signup/
_________ Test00UserRegistration.test_00_valid_data_admin_create_user _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x051A5178>
admin_client = <rest_framework.test.APIClient object at 0x04F8E3E8>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_admin_create_user(self, admin_client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = admin_client.post(self.url_admin_create_user, data=valid_data)
        outbox_after = mail.outbox
    
        assert response.status_code != 404, (
            f'—траница `{self.url_admin_create_user}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 201
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_admin_create_user}` с валидными данными '
            f'от имени администратора, создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` с валидными данными от имени администратора, создаетс€ пользователь и возвращаетс€ статус 201
E       assert 403 == 201
E         +403
E         -201

tests\test_00_user_registration.py:142: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_____ Test00UserRegistration.test_00_registration_me_username_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x04F41730>
client = <django.test.client.Client object at 0x04F36748>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_me_username_restricted(self, client):
        valid_email = 'valid@yamdb.fake'
        invalid_username = 'me'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email,
            'username': invalid_username
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` '
            f'нельз€ создать пользовател€ с username = "me" и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` нельз€ создать пользовател€ с username = "me" и возвращаетс€ статус 400
E       assert 200 == 400
E         +200
E         -400

tests\test_00_user_registration.py:239: AssertionError
____________________ Test01UserAPI.test_04_users_get_admin ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x04E83670>
admin_client = <rest_framework.test.APIClient object at 0x0535A190>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
        assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'ѕроверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращаетс€ статус 200'
        )
E       AssertionError: ѕроверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращаетс€ статус 200
E       assert 403 == 200
E         +403
E         -200

tests\test_01_users.py:51: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search __________________

self = <tests.test_01_users.Test01UserAPI object at 0x05372040>
admin_client = <rest_framework.test.APIClient object at 0x05372868>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
        assert response.status_code != 404, (
            '—траница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
        reponse_json = response.json()
>       assert 'results' in reponse_json and isinstance(reponse_json.get('results'), list), (
            'ѕроверьте, что при GET запросе `/api/v1/users/?search={username}` '
            'результаты возвращаютс€ под ключом `results` и в виде списка.'
        )
E       AssertionError: ѕроверьте, что при GET запросе `/api/v1/users/?search={username}` результаты возвращаютс€ под ключом `results` и в виде списка.
E       assert ('results' in {'detail': '” вас недостаточно прав дл€ выполнени€ данного действи€.'})

tests\test_01_users.py:97: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_05_01_users_post_admin __________________

self = <tests.test_01_users.Test01UserAPI object at 0x04F195C8>
admin_client = <rest_framework.test.APIClient object at 0x04EEAE20>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400
E       assert 403 == 400
E         +403
E         -400

tests\test_01_users.py:135: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_05_02_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x051100B8>
user_superuser_client = <rest_framework.test.APIClient object at 0x054448C8>

    @pytest.mark.django_db(transaction=True)
    def test_05_02_users_post_user_superuser(self, user_superuser_client):
        users = get_user_model().objects.all()
        users_before = users.count()
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post('/api/v1/users/', data=valid_data)
>       assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, '
            'с правильными данными, возвращаете статус 201.'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, с правильными данными, возвращаете статус 201.
E       assert 400 == 201
E         +400
E         -201

tests\test_01_users.py:260: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/users/
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x05372508>
admin_client = <rest_framework.test.APIClient object at 0x04F2D688>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x053DA190>
admin_client = <rest_framework.test.APIClient object at 0x053DA220>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x05490760>
admin_client = <rest_framework.test.APIClient object at 0x05423490>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_09_users_check_permissions ________________

self = <tests.test_01_users.Test01UserAPI object at 0x04F36088>
admin_client = <rest_framework.test.APIClient object at 0x04E9A550>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x04F2D040>
admin_client = <rest_framework.test.APIClient object at 0x05423B80>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_01_users_me_patch_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x054715C8>
admin_client = <rest_framework.test.APIClient object at 0x05471700>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x05490FA0>
user_client = <rest_framework.test.APIClient object at 0x056259B8>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
>       assert response.status_code == 200, (
            'ѕроверьте, что при PATCH запросе `/api/v1/users/me/`, '
            'пользователь с ролью user может изменить свои данные, и возвращаетс€ статус 200'
        )
E       AssertionError: ѕроверьте, что при PATCH запросе `/api/v1/users/me/`, пользователь с ролью user может изменить свои данные, и возвращаетс€ статус 200
E       assert 403 == 200
E         +403
E         -200

tests\test_01_users.py:560: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/me/
__________________ Test02CategoryAPI.test_02_category_admin ___________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x04F11958>
admin_client = <rest_framework.test.APIClient object at 0x05417A18>

    @pytest.mark.django_db(transaction=True)
    def test_02_category_admin(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/categories/', data=data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400
E       assert 403 == 400
E         +403
E         -400

tests\test_02_category.py:22: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
_______________ Test02CategoryAPI.test_03_category_delete_admin _______________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05451D48>
admin_client = <rest_framework.test.APIClient object at 0x053F34F0>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
        response = admin_client.delete('/api/v1/categories/books/')
>       assert response.status_code == 204, (
            'ѕроверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204
E       assert 403 == 204
E         +403
E         -204

tests\test_02_category.py:96: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/books/
__________ Test02CategoryAPI.test_04_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x04F03B98>
client = <django.test.client.Client object at 0x054902E0>
admin_client = <rest_framework.test.APIClient object at 0x05106478>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'ћузыка',
            'slug': 'music'
        }
        response = client.post('/api/v1/categories/', data=data)
        assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/categories/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
        response = client.delete(f'/api/v1/categories/{categories[0]["slug"]}/')
        assert response.status_code == 401, (
            'ѕроверьте, что при DELETE запросе `/api/v1/categories/{{slug}}/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
>       user, moderator = create_users_api(admin_client)

tests\test_02_category.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Unauthorized: /api/v1/categories/
WARNING  django.request:log.py:222 Unauthorized: /api/v1/categories/films/
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
________________________ Test03GenreAPI.test_02_genre _________________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x04EEAB20>
admin_client = <rest_framework.test.APIClient object at 0x053EEC70>

    @pytest.mark.django_db(transaction=True)
    def test_02_genre(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/genres/', data=data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400
E       assert 403 == 400
E         +403
E         -400

tests\test_03_genre.py:22: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x04E4E790>
admin_client = <rest_framework.test.APIClient object at 0x05437190>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
>       assert response.status_code == 204, (
            'ѕроверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204
E       assert 403 == 204
E         +403
E         -204

tests\test_03_genre.py:87: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/horror/
_______________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x05437928>
client = <django.test.client.Client object at 0x04E83958>
admin_client = <rest_framework.test.APIClient object at 0x05471490>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Ѕоевик',
            'slug': 'action'
        }
        response = client.post('/api/v1/genres/', data=data)
        assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/genres/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
        response = client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
        assert response.status_code == 401, (
            'ѕроверьте, что при DELETE запросе `/api/v1/genres/{{slug}}/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
>       user, moderator = create_users_api(admin_client)

tests\test_03_genre.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
>           raise self.model.DoesNotExist(
                "%s matching query does not exist." %
                self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

venv\lib\site-packages\django\db\models\query.py:406: DoesNotExist
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Unauthorized: /api/v1/genres/
WARNING  django.request:log.py:222 Unauthorized: /api/v1/genres/horror/
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x05110B38>
admin_client = <rest_framework.test.APIClient object at 0x05609790>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400
E       assert 403 == 400
E         +403
E         -400

tests\test_04_title.py:25: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x05621CD0>
client = <django.test.client.Client object at 0x04F11970>
admin_client = <rest_framework.test.APIClient object at 0x04F11418>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x04F11418>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
_______________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x04EBA298>
client = <django.test.client.Client object at 0x05417E08>
admin_client = <rest_framework.test.APIClient object at 0x054170A0>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x054170A0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05423CE8>
client = <django.test.client.Client object at 0x05423BC8>
admin_client = <rest_framework.test.APIClient object at 0x054236D0>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x054236D0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05490358>
admin_client = <rest_framework.test.APIClient object at 0x056BBDD8>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x056BBDD8>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05451448>
client = <django.test.client.Client object at 0x05451B20>
admin_client = <rest_framework.test.APIClient object at 0x054518C8>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x054518C8>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05110EC8>
client = <django.test.client.Client object at 0x051104D8>
admin_client = <rest_framework.test.APIClient object at 0x04E99E68>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x04E99E68>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05110B08>
client = <django.test.client.Client object at 0x04F032B0>
admin_client = <rest_framework.test.APIClient object at 0x04F03DA8>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x04F03DA8>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0545B1C0>
admin_client = <rest_framework.test.APIClient object at 0x0545B808>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0545B808>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05110100>
client = <django.test.client.Client object at 0x053B4370>
admin_client = <rest_framework.test.APIClient object at 0x053B4F88>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x053B4F88>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0535A2E0>
client = <django.test.client.Client object at 0x051A5778>
admin_client = <rest_framework.test.APIClient object at 0x04DD07C0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x04DD07C0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests\common.py:69: KeyError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/genres/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/categories/
WARNING  django.request:log.py:222 Forbidden: /api/v1/titles/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - us...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_03_genre.py::Test03GenreAPI::test_02_genre - AssertionError...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - Assert...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - KeyErr...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Ke...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - KeyEr...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================= 31 failed, 22 passed in 10.43s ========================
